def initRightAndDown(l):
    #initial down
    for i in range(len(l) - 2, -1, -1):
        for j in range(len(l[0])):
            if l[i][j] == 0:
                down[i][j] = 0
            else:
                down[i][j] = down[i+1][j] + 1
    
    #initial right
    for j in range(len(l[0]) - 2, -1, -1):
        for i in range(len(l)):
            if l[i][j] == 0:
                right[i][j] = 0
            else:
                right[i][j] = right[i][j+1] + 1
    
def process(l):
    res = []
    initRightAndDown(l)
    for i in range(len(l)):
        for j in range(len(l[0])):
            for length in range(1, min(len(l[0])-j, len(l)-i)):
                if right[i][j] >= length and down[i][j] >= length and down[i][j+length] >= length and right[i+length][j] >= length:
                    res.append(length+1)
    return max(res)

l = [
    [0, 1, 1, 1, 1],
    [0, 1, 0, 0, 1],
    [0, 1, 0, 0, 1],
    [0, 1, 1, 1, 1],
    [0, 1, 0, 1, 1]
]
right = [[l[i][j] if j == len(l[0]) - 1 else 0 for j in range(len(l[0]))] for i in range(len(l))]
down = [[l[i][j] if i == len(l) - 1 else 0 for j in range(len(l[0]))] for i in range(len(l))]
print(process(l))
